# -*- coding: utf-8 -*-
"""ckd

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PfHSH4jVtMH_GGvXWh_v0OOkvSCZUHUA
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import GridSearchCV, train_test_split, cross_val_score
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import r2_score
import scipy.stats as stats
import seaborn as sns
import pickle

# %matplotlib inline

df = pd.read_csv('/content/drive/My Drive/chronic_kidney_disease_full.csv')
data = df

data.head()

data['class'] = data['class'].map({'ckd':1,'notckd':0})
data['htn'] = data['htn'].map({'yes':1,'no':0})
data['dm'] = data['dm'].map({'yes':1,'no':0})
data['cad'] = data['cad'].map({'yes':1,'no':0})
data['appet'] = data['appet'].map({'good':1,'poor':0})
data['ane'] = data['ane'].map({'yes':1,'no':0})
data['pe'] = data['pe'].map({'yes':1,'no':0})
data['ba'] = data['ba'].map({'present':1,'notpresent':0})
data['pcc'] = data['pcc'].map({'present':1,'notpresent':0})
data['pc'] = data['pc'].map({'abnormal':1,'normal':0})
data['rbc'] = data['rbc'].map({'abnormal':1,'normal':0})

data['class'].value_counts()

plt.figure(figsize = (19,19))
sns.heatmap(data.corr(), annot = True, cmap = 'bwr') # looking for strong correlations with "class" row

data.shape

data.columns

data.isnull().sum()

data.shape[0], data.dropna().shape[0]

data.dropna(inplace=True)

data.shape

from sklearn.linear_model import LogisticRegression

model = LogisticRegression()

X = data.iloc[:,:-1]
y = data['class']

X_train, X_test, y_train, y_test = train_test_split(X,y, stratify = y, shuffle = True)

model.fit(X_train,y_train)

# define one new data instance
Xnew = [[73,90,1.01,1,4,1,1,1,0,234,56,1.9,113,4.1,10.3,28,9500,4.9,0,1,0,1,0,0]]

# make a prediction
ynew = model.predict(Xnew)

# show the inputs and predicted outputs
print("X=%s, Predicted=%s" % (Xnew[0], ynew[0]))

# save the model to disk
filename = 'finalized_ckda_model.pkl'
pickle.dump(model, open(filename, 'wb'))

# load the model from disk
loaded_model = pickle.load(open(filename, 'rb'))
result = loaded_model.score(X_test, y_test)
print(result)

test_pred = model.predict(X_test)
train_pred = model.predict(X_train)

from sklearn.metrics import accuracy_score, confusion_matrix

print('Train Accuracy: ', accuracy_score(y_train, train_pred))
print('Test Accuracy: ', accuracy_score(y_test, test_pred))

pd.DataFrame(model.coef_, columns=X.columns)

tn, fp, fn, tp = confusion_matrix(y_test, test_pred).ravel()

print(f'True Neg: {tn}')
print(f'False Pos: {fp}')
print(f'False Neg: {fn}')
print(f'True Pos: {tp}')

df["class"].value_counts()

balanced_df = pd.concat([df[df["class"] == 0], df[df["class"] == 1].sample(n = 115, replace = True)], axis = 0)
balanced_df.reset_index(drop=True, inplace=True)

balanced_df["class"].value_counts()